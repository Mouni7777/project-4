name: Deploy Spring Boot Hello World Application to EKS

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: ca-central-1
  ECR_REPOSITORY: springboot-ecr
  CLUSTER_NAME: springboot-eks
  CONTAINER_NAME: springboot

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Build with Maven
      run: mvn clean install

    - name: List files in target directory
      run: ls -l target/

    # Configure AWS Credentials for other AWS CLI commands
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Check AWS CLI Version
      run: aws --version

    # Ensure ECR Repository Exists
    - name: Ensure ECR Repository Exists
      run: |
        aws ecr describe-repositories --repository-names $ECR_REPOSITORY || \
        aws ecr create-repository --repository-name $ECR_REPOSITORY

    # Login to Amazon ECR
    - name: Log in to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # Build and Push Docker Image
    - name: Build and Push Docker Image
      run: |
        IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest
        docker build -t $IMAGE_URI .
        docker push $IMAGE_URI
        echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

    # Update Kubernetes manifest image with the pushed image URI
    - name: Update K8s manifest
      run: |
        sed -i "s|<IMAGE>|$IMAGE_URI|g" deployment.yaml

    - name: Install kubectl
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
        kubectl version --client

    - name: Install aws-iam-authenticator (required for EKS)
      run: |
        curl -o aws-iam-authenticator https://amazon-eks.s3.us-west-2.amazonaws.com/latest/bin/linux/amd64/aws-iam-authenticator
        chmod +x aws-iam-authenticator
        sudo mv aws-iam-authenticator /usr/local/bin/

    # Update kubeconfig to interact with EKS cluster created by Terraform
    - name: Update kubeconfig
      run: aws eks update-kubeconfig --region $AWS_REGION --name $CLUSTER_NAME

    - name: Verify kubeconfig and cluster access
      run: |
        kubectl config current-context
        kubectl get nodes

    - name: Install yq
      run: |
        sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
        sudo chmod +x /usr/bin/yq

    - name: Patch aws-auth ConfigMap to add GitHub Actions IAM role
      run: |
        IAM_ROLE_ARN="arn:aws:iam::123456789012:role/github-actions-role"
        
        kubectl get configmap aws-auth -n kube-system -o yaml > aws-auth.yaml

        if yq e ".data.mapRoles" aws-auth.yaml | grep -q "$IAM_ROLE_ARN"; then
          echo "IAM role ARN already exists in aws-auth ConfigMap"
        else
          if ! yq e ".data.mapRoles" aws-auth.yaml >/dev/null 2>&1; then
            yq e '.data.mapRoles = "- rolearn: \"'$IAM_ROLE_ARN'\"\n  username: admin\n  groups:\n    - system:masters"' -i aws-auth.yaml
          else
            yq e '.data.mapRoles += "\n- rolearn: \"'$IAM_ROLE_ARN'\"\n  username: admin\n  groups:\n    - system:masters"' -i aws-auth.yaml
          fi
          kubectl apply -f aws-auth.yaml
        fi
      env:
        KUBECONFIG: $HOME/.kube/config


    # Deploy Kubernetes resources
    - name: Deploy to EKS
      run: |
        kubectl apply -f deployment.yaml --validate=false
        kubectl apply -f service.yaml --validate=false

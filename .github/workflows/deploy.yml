name: Deploy Spring Boot Hello World Application to EKS

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: ca-central-1
  ECR_REPOSITORY: springboot-ecr
  CLUSTER_NAME: springboot-eks-cluster
  CONTAINER_NAME: springboot

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Build with Maven
      run: mvn clean install

    - name: List files in target directory
      run: ls -l target/

    - name: Install SonarScanner CLI
      run: |
        wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
        unzip sonar-scanner-cli-5.0.1.3006-linux.zip
        sudo mv sonar-scanner-5.0.1.3006-linux /opt/sonar-scanner
        sudo ln -s /opt/sonar-scanner/bin/sonar-scanner /usr/local/bin/sonar-scanner

    - name: Run SonarQube Analysis with CLI
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      run: |
        sonar-scanner \
          -Dsonar.projectKey=Mouni7777_project-4 \
          -Dsonar.organization=project4 \
          -Dsonar.sources=. \
          -Dsonar.java.binaries=target/classes \
          -Dsonar.host.url=$SONAR_HOST_URL \
          -Dsonar.login=$SONAR_TOKEN

    # Configure AWS Credentials for other AWS CLI commands
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Check AWS CLI Version
      run: aws --version

    # Ensure ECR Repository Exists
    - name: Ensure ECR Repository Exists
      run: |
        aws ecr describe-repositories --repository-names $ECR_REPOSITORY || \
        aws ecr create-repository --repository-name $ECR_REPOSITORY

    # Login to Amazon ECR
    - name: Log in to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # Build and Push Docker Image
    - name: Build and Push Docker Image
      run: |
        IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest
        docker build -t $IMAGE_URI .
        docker push $IMAGE_URI
        echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

    - name: Install Trivy
        run: |
          sudo apt-get install -y wget gnupg
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | gpg --dearmor | sudo tee /usr/share/keyrings/trivy.gpg > /dev/null
          echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb generic main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy

    # Run Trivy Scan and Save Report
    - name: Run Trivy and Save Report
      run: |
        trivy image --severity CRITICAL,HIGH --format table -o trivy-report.txt $IMAGE_URI

    # Upload Trivy Report as Artifact
    - name: Upload Trivy Report
      uses: actions/upload-artifact@v4
      with:
        name: trivy-report
        path: trivy-report.txt

    # Update Kubernetes manifest image with the pushed image URI
    - name: Update K8s manifest
      run: |
        sed -i "s|<IMAGE>|$IMAGE_URI|g" deployment.yaml

    - name: Install kubectl
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
        kubectl version --client

    
    # Update kubeconfig to interact with EKS cluster created by Terraform
    - name: Update kubeconfig
      run: aws eks update-kubeconfig --region $AWS_REGION --name $CLUSTER_NAME

    # Deploy Kubernetes resources
    - name: Deploy to EKS
      run: |
        kubectl apply -f deployment.yaml
        kubectl apply -f service.yaml
